---
description: C·∫•u tr√∫c d·ª± √°n Todo App
globs:
alwaysApply: true
---

# Memory Bank - Todo App Project

## üè¥‚Äç‚ò†Ô∏è T·ªïng quan d·ª± √°n

**Todo App** - N·ªÅn t·∫£ng qu·∫£n l√Ω c√¥ng vi·ªác v√† theo d√µi c·ªï phi·∫øu ƒë∆∞·ª£c x√¢y d·ª±ng v·ªõi Django + React + Tailwind CSS

### Ki·∫øn tr√∫c c·ªët l√µi

- **Backend**: Django 5.2.5 + PostgreSQL
- **Frontend**: React + Tailwind CSS + shadcn/ui
- **Qu·∫£n l√Ω c·∫•u h√¨nh**: Dynaconf
- **Database**: PostgreSQL

## üìÅ C·∫•u tr√∫c d·ª± √°n tham kh·∫£o nhanh

### C·∫•u tr√∫c Backend

‚îú‚îÄ‚îÄ Dockerfile # C·∫•u h√¨nh build image
‚îî‚îÄ‚îÄ README.md # T√†i li·ªáu d·ª± √°n


## üéØ Quy ∆∞·ªõc v√† m·∫´u thi·∫øt k·∫ø ch√≠nh

### Quy ∆∞·ªõc ƒë·∫∑t t√™n file
- **Filenames**: `snake_case` (v√≠ d·ª•: `todo_model.py`, `stock_view.py`)
- **Classes**: `PascalCase` (v√≠ d·ª•: `TodoModel`, `StockView`)
- **Functions**: `snake_case` (v√≠ d·ª•: `get_todos`, `create_stock`)
- **Constants**: `UPPER_SNAKE_CASE` (v√≠ d·ª•: `MAX_TODO_LENGTH`)

### M·∫´u thi·∫øt k·∫ø Backend

#### Model Pattern
```python
class Todo(models.Model):
    title = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    completed = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
        
    def __str__(self):
        return self.title
```

#### View Pattern
```python
def todo_list(request):
    todos = Todo.objects.all()
    context = {'todos': todos}
    return render(request, 'todo/index.html', context)

def todo_detail(request, pk):
    todo = get_object_or_404(Todo, pk=pk)
    context = {'todo': todo}
    return render(request, 'todo/detail.html', context)
```

#### Form Pattern
```python
class TodoForm(forms.ModelForm):
    class Meta:
        model = Todo
        fields = ['title', 'description', 'completed']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 4}),
        }
```

### M·∫´u thi·∫øt k·∫ø Frontend

#### Component Pattern
```tsx
interface TodoItemProps {
  todo: Todo;
  onToggle: (id: number) => void;
}

export function TodoItem({ todo, onToggle }: TodoItemProps) {
  return (
    <div className="flex items-center p-4 border-b">
      <input
        type="checkbox"
        checked={todo.completed}
        onChange={() => onToggle(todo.id)}
        className="mr-2"
      />
      <span className={todo.completed ? 'line-through' : ''}>
        {todo.title}
      </span>
    </div>
  );
}
```

#### Page Pattern
```tsx
export default function TodoListPage() {
  const [todos, setTodos] = useState<Todo[]>([]);
  
  useEffect(() => {
    // Fetch todos from API
    todoService.getTodos().then(setTodos);
  }, []);
  
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Danh s√°ch c√¥ng vi·ªác</h1>
      {todos.map(todo => (
        <TodoItem 
          key={todo.id} 
          todo={todo} 
          onToggle={handleToggle} 
        />
      ))}
    </div>
  );
}
```

## üîß Quy tr√¨nh ph√°t tri·ªÉn

### L·ªánh c√†i ƒë·∫∑t
```bash
# C√†i ƒë·∫∑t dependencies Python
pip install -r requirements.txt

# C√†i ƒë·∫∑t dependencies Frontend
cd frontend
npm install

# T·∫°o v√† √°p d·ª•ng migrations
python manage.py makemigrations
python manage.py migrate

# Ch·∫°y server ph√°t tri·ªÉn
python manage.py runserver

# Ch·∫°y frontend dev server
cd frontend
npm start
```

### T·∫°o code
```bash
# T·∫°o ·ª©ng d·ª•ng Django m·ªõi
python manage.py startapp new_app

# T·∫°o model m·ªõi
# Th√™m v√†o file models.py

# T·∫°o migration
python manage.py makemigrations

# √Åp d·ª•ng migration
python manage.py migrate
```

### Ki·ªÉm th·ª≠
```bash
# Ch·∫°y t·∫•t c·∫£ tests
pytest

# Ch·∫°y tests cho m·ªôt ·ª©ng d·ª•ng c·ª• th·ªÉ
pytest todo/

# Ch·∫°y tests v·ªõi coverage
pytest --cov=.
```

## üé® H∆∞·ªõng d·∫´n UI/UX

### T·ªï ch·ª©c Component
- **Common UI**: `frontend/src/components/common/`
- **Todo Components**: `frontend/src/components/todo/`
- **Stock Components**: `frontend/src/components/stock/`

### Styling
- **Primary**: Tailwind CSS utility classes
- **Components**: shadcn/ui cho thi·∫øt k·∫ø nh·∫•t qu√°n
- **Custom CSS**: CSS modules cho styles ph·ª©c t·∫°p

## üóÑÔ∏è M·∫´u Database

### Migration Structure
```python
class Migration(migrations.Migration):
    dependencies = [
        ('todo', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TodoCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AddField(
            model_name='todo',
            field=models.ForeignKey(null=True, on_delete=models.SET_NULL, to='todo.todocategory'),
        ),
    ]
```

## üîí B·∫£o m·∫≠t & Ph√¢n quy·ªÅn

### X√°c th·ª±c
- **Session-based**: Django session middleware
- **API tokens**: Cho t√≠ch h·ª£p b√™n ngo√†i
- **OAuth**: T√≠ch h·ª£p Google, GitHub

### Ph√¢n quy·ªÅn
- **Permissions**: Django permissions framework
- **Groups**: Nh√≥m ng∆∞·ªùi d√πng v·ªõi quy·ªÅn c·ª• th·ªÉ
- **Middleware**: B·∫£o v·ªá c·∫•p route

### Validation
- **Input**: Django forms v√† validators
- **Output**: Serializers
- **Errors**: Custom exception handlers

## üìä T·ªëi ∆∞u hi·ªáu su·∫•t

### Backend
- **Eager Loading**: Preload relationships v·ªõi select_related v√† prefetch_related
- **Caching**: Django cache framework v·ªõi Redis
- **Indexing**: Database indexes cho c√°c truy v·∫•n th∆∞·ªùng xuy√™n

### Frontend
- **Memoization**: useMemo cho t√≠nh to√°n t·ªën k√©m
- **Lazy Loading**: Code splitting v√† dynamic imports
- **Optimistic Updates**: UX t·ªët h∆°n cho mutations

## üß™ Chi·∫øn l∆∞·ª£c ki·ªÉm th·ª≠

### Lo·∫°i ki·ªÉm th·ª≠
- **Unit**: C√°c h√†m v√† ph∆∞∆°ng th·ª©c ri√™ng l·∫ª
- **Integration**: API endpoints v√† views
- **E2E**: Lu·ªìng ng∆∞·ªùi d√πng ho√†n ch·ªânh
- **Component**: Ki·ªÉm th·ª≠ React component

### M·∫´u ki·ªÉm th·ª≠
```python
class TodoModelTests(TestCase):
    def setUp(self):
        Todo.objects.create(title="Test Todo", description="Test Description")
        
    def test_todo_creation(self):
        todo = Todo.objects.get(title="Test Todo")
        self.assertEqual(todo.description, "Test Description")
        self.assertFalse(todo.completed)
```

## üöÄ Tri·ªÉn khai & DevOps

### Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng
- **Development**: SQLite local
- **Staging**: PostgreSQL v·ªõi d·ªØ li·ªáu test
- **Production**: Managed database services

### C·∫•u h√¨nh
- **Environment**: `.env` files cho secrets
- **Dynaconf**: `.secrets.yaml` v√† `settings.yaml`
- **Database**: Multiple connection configs

### Gi√°m s√°t
- **Logging**: Django logging framework
- **Error Tracking**: Sentry integration
- **Health Checks**: Endpoints s·∫µn s√†ng v√† s·ªëng

## üìö Dependencies ch√≠nh

### Backend
- `django`: Framework core
- `psycopg2-binary`: PostgreSQL adapter
- `dynaconf`: Qu·∫£n l√Ω c·∫•u h√¨nh
- `pytest`: Testing framework
- `pytest-django`: Django test integration

### Frontend
- `react`: Th∆∞ vi·ªán UI
- `tailwindcss`: Styling
- `shadcn/ui`: Th∆∞ vi·ªán component
- `axios`: HTTP client
- `react-query`: Data fetching

### Development
- `typescript`: Type safety
- `eslint`: Code linting
- `prettier`: Code formatting
- `jest`: Testing framework

## üéØ Tham kh·∫£o nhanh cho c√°c t√°c v·ª• th√¥ng d·ª•ng

### T·∫°o t√≠nh nƒÉng m·ªõi
1. T·∫°o model: Th√™m v√†o `models.py`
2. T·∫°o migration: `python manage.py makemigrations`
3. √Åp d·ª•ng migration: `python manage.py migrate`
4. T·∫°o view: Th√™m v√†o `views.py`
5. C·∫≠p nh·∫≠t URL: Th√™m v√†o `urls.py`
6. T·∫°o template: Th√™m v√†o `templates/`
7. T·∫°o component React: Th√™m v√†o `frontend/src/components/`
8. T·∫°o trang React: Th√™m v√†o `frontend/src/pages/`

### Thao t√°c Database
- **Migration**: `python manage.py migrate`
- **Rollback**: `python manage.py migrate app_name 0001_previous_migration`
- **Shell**: `python manage.py shell`
- **SQL Shell**: `python manage.py dbshell`

Ng√¢n h√†ng b·ªô nh·ªõ n√†y ph·ª•c v·ª• nh∆∞ t√†i li·ªáu tham kh·∫£o t·ªëi ∆∞u ƒë·ªÉ duy tr√¨ t√≠nh nh·∫•t qu√°n v√† tu√¢n th·ªß c√°c m·∫´u thi·∫øt k·∫ø ƒë√£ thi·∫øt l·∫≠p trong to√†n b·ªô codebase! üö¢‚öì